on: 
  release:
    types: [published]
name: New Version Release
jobs:

  exportDockerRootFS:
    name: Build and export Docker rootfs for Windows build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Docker Build and export
      run: |
        docker build -t difegue/lanraragi -f ./tools/build/docker/Dockerfile .
        docker create --name rootfs difegue/lanraragi 
        docker export --output=package.tar rootfs
    - name: Upload rootfs
      uses: actions/upload-artifact@v1
      with:
        name: package
        path: package.tar 
  buildReleaseWSL:
    name: Build Windows Installer
    needs: exportDockerRootFS
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@master
    - name: Download package
      uses: actions/download-artifact@v1
      with:
        name: package
    - name: Build MSI Installer
      shell: powershell
      run: |
        Import-Module "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"; 
        Enter-VsDevShell -VsInstallPath "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise" -SkipAutomaticLocation
        $ErrorActionPreference = 'Continue'
        git submodule init
        git submodule update
        choco install nuget.commandline
        ./tools/build/windows/build.ps1
    - name: Upload Installer
      uses: actions/upload-artifact@v1
      with:
        name: wsl
        path: ./tools/build/windows/Karen/Setup/bin/LANraragi.msi
  uploadWSLRelease:
    name: Add Windows Installer to release
    needs: buildReleaseWSL
    runs-on: ubuntu-latest
    steps:
    - name: Download package
      uses: actions/download-artifact@v1
      with:
        name: wsl
    - name: Upload Installer to release
      uses: JasonEtco/upload-to-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        args: wsl/LANraragi.msi application/octet-stream

  buildLatestDocker:
    name: Build Latest Docker image
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Set up Docker Buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest
    - name: Build/Push Latest Docker image and tag with Release number
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      run: |
        TAG=${GITHUB_REF:10:10}
        echo "${DOCKER_PASSWORD}" | docker login -u ${DOCKER_USERNAME} --password-stdin
        docker buildx build \
          --platform linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x \
          --output "type=image,push=true" \
          --cache-from difegue/lanraragi:latest \
          --tag difegue/lanraragi:latest \
          --tag difegue/lanraragi:$TAG \
          --file ./tools/build/docker/Dockerfile .

  discordNotifications:
    name: Send out some notifications
    runs-on: ubuntu-latest
    env:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
    steps:
    - name: Extract version number from GITHUB_REF
      run: echo ::set-env name=RELEASE_VERSION::$(echo ${GITHUB_REF:10})
    - uses: Ilshidur/action-discord@master
      with:
        args: 'LANraragi {{ RELEASE_VERSION }} is now available! @everyone'
    - uses: Ilshidur/action-discord@master
      with:
        args: 'http://'